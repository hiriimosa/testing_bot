elebot
import mysql.connector
from flask import Flask, request
from telebot import types
from datetime import datetime
import os

# –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–¥–æ–ø—Ç–æ–≤
IMAGE_DIR = "Image"
if not os.path.exists(IMAGE_DIR):
    os.makedirs(IMAGE_DIR)

#  –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç

token = "7671111074:AAEiJuIE5TqNpPJhvRRgPPyPmoZSjRW4gDQ"
bot = telebot.TeleBot(token, parse_mode="HTML")
# app = Flask(__name__)

# @app.route(f"/{token}", methods=["POST"])
# def webhook():
#     print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram! - Webhook")
#     json_update = request.get_json()
#     if json_update:
#         print(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {json_update}")
#         bot.process_new_updates([telebot.types.Update.de_json(json_update)])
#     else:
#         print("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram")
#     return "OK", 200

admin_state = {}
user_state = {}
user_orders = {}
current_page = {}
page_size = 1
delete_message_bot ={}
admin_data_publicate = {}
admin_new_price = {}

image_extantion = (".jpg", ".jpeg", ".png", ".gif", )
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

db_config = {
    'unix_socket': '/var/run/mysqld/mysqld.sock',  # –ü—É—Ç—å –∫ —Å–æ–∫–µ—Ç—É MySQL
    'user': 'root',                                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å root
    'database': '–≤–∞—à–∞_–±–∞–∑–∞_–¥–∞–Ω–Ω—ã—Ö',               # –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    'raise_on_warnings': True
}

try:
    conn = mysql.connector.connect(**db_config)
    if conn.is_connected():
        print(">> –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        conn.close()
    else:
        print(">> –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
except mysql.connector.Error as e:
    print(f">> –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")

# !–¢–ï–°–¢! –í—ã–±–æ—Ä –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
print("1) hiriimosa\n2) piknave\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
choose_admin = 2
if choose_admin==1:
    admin_id = 945985582
    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, Hiriimosa (ID: 945985582)")
else:
    admin_id = 1039505409
    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, Piknave (ID: 1039505409)")
print("–ó–∞–ø—É—â–µ–Ω!..")

# –ö–Ω–æ–ø–∫–∏

button_order            = types.KeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
button_about_me         = types.KeyboardButton("–û–±–æ –º–Ω–µ")

button_orders                   = types.KeyboardButton("–ó–∞–∫–∞–∑—ã")
button_publication_adopt_admin  = types.KeyboardButton("–í—ã–ª–æ–∂–∏—Ç—å –∞–¥–æ–ø—Ç–∞")

button_published_adopt    = types.KeyboardButton("–ê–¥–æ–ø—Ç—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
keyboard_user = types.ReplyKeyboardMarkup(resize_keyboard=True)
keyboard_user.add(button_order,
                        button_published_adopt)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∞
keyboard_admin = types.ReplyKeyboardMarkup(resize_keyboard=True)
keyboard_admin.add(button_orders,
                        button_publication_adopt_admin,
                        button_published_adopt)

def confirming_admin(chat_user_id):
    if chat_user_id == admin_id:
        return False
    else:
        return True

@bot.message_handler(commands=['start'])
def send_start_message(message):
    print(f"–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {message.chat.id}")
    bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    user_id = message.chat.id
    try:
        if user_id == admin_id:
            bot.send_message(admin_id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, piknave!", parse_mode=None, reply_markup=keyboard_admin)
        else:
            folder_Image = "/home/hiriimosa/piknave_TeleBot/Image"  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
            group_main_photos = []

            if os.path.exists(folder_Image):
                    for file in os.listdir(folder_Image):
                        if file.lower().endswith(image_extantion):
                            file_path = os.path.join(folder_Image, file)
                            group_main_photos.append(types.InputMediaPhoto(open(file_path, "rb")))

            if group_main_photos:
                    bot.send_media_group(message.chat.id, group_main_photos)
            else:
                print("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

            bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø piknave!", reply_markup=keyboard_user)
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–æ–ø—Ç–æ–≤
@bot.message_handler(func = lambda message:message.text == "–ê–¥–æ–ø—Ç—ã")
def view_adoptions(message):
    user_id = message.chat.id

    show_adopt_page(message, user_id )

def get_user_state(user_id):
    if user_id not in user_state:
        user_state[user_id] = {'pages': 0}
    return user_state[user_id]

def get_existing_list_adopts():
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor(dictionary=True)
    sql = "SELECT * FROM art_lots_links WHERE status = '–∞–∫—Ç–∏–≤–µ–Ω'"
    cursor.execute(sql)
    adoptions = cursor.fetchall()
    cursor.close()
    conn.close()
    if len(adoptions)==0:
        adoptions = {}
    return adoptions

def show_adopt_page(message, user_id,edit = False):
    state = get_user_state(user_id)
    current_index = state.get('current_adopt_index', 0)
    adoptions = get_existing_list_adopts()

    if len(adoptions) == 0:
        bot.send_message(user_id, "üì≠ –°–ø–∏—Å–æ–∫ –∞–¥–æ–ø—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    current_index = max(0, min(current_index, len(adoptions) - 1))
    state['current_adopt_list'] = current_index
    adopt_info = adoptions[current_index]

    text = (
        f"üìå –ê–¥–æ–ø—Ç ‚Ññ{adopt_info['id']}\n"
        f"üë§ –ù–∞–∑–≤–∞–Ω–∏–µ: {adopt_info['title']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {adopt_info['description']}\n"
        f"üìÖ –ù–∞—á: {adopt_info['price']} —Ä—É–±./ {adopt_info['price'] / 100} $\n"
        f"üìÖ –ú–∏–Ω: {adopt_info['minimal_bid']} —Ä—É–±. / {adopt_info['minimal_bid'] / 100} $\n"
        f"üìù –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {adopt_info['current_bid']} —Ä—É–± –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è |{adopt_info['last_bidder_username']}|\n\n"
    )

    total_pages = len(adoptions)

    markup = types.InlineKeyboardMarkup()
    btn_back = types.InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='adopt_view_back')
    btn_next = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚Üí", callback_data='adopt_view_forward')
    btn_bet_adopt = types.InlineKeyboardButton("–ü–æ—Å—Ç. —Å—Ç–∞–≤–∫—É", callback_data=f"adopt_view_btn_bet_{adopt_info['id']}")

    if total_pages == 2 and current_index != 2 or current_index != 0 and current_index == total_pages - 1:
        markup.add(btn_back)
    if current_index < total_pages - 1:
        if current_index > 0:
            markup.row(btn_back, btn_next)
        else:
            markup.add(btn_next)

    markup.add(btn_bet_adopt)
    if user_id == admin_id:
        btn_edit = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'adopt_page_edit_{adopt_info["id"]}')
        btn_del = types.InlineKeyboardButton("‚úèÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'adopt_page_del_{adopt_info["id"]}')
        markup.add(btn_edit,btn_del)

    try:
        if edit:
            media = types.InputMediaPhoto(adopt_info['image_url'], caption=text)
            bot.edit_message_media(
                media=media,
                chat_id=user_id,
                message_id=message.message_id,
                reply_markup=markup
            )
        else:
            bot.send_photo(
                chat_id=user_id,
                photo=adopt_info['image_url'],
                caption=text,
                reply_markup=markup
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

@bot.callback_query_handler(func = lambda call:call.data.startswith("adopt_page_del_"))
def del_adopt_page(call):
    user_id = call.message.chat.id

    if confirming_admin(user_id):
        return



    inline_keyboard = types.InlineKeyboardMarkup(row_width=2)

    admin_adopt_page_del_yes = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='admin_adopt_page_del_yes')
    admin_adopt_page_del_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='admin_adopt_page_del_no')

    inline_keyboard.add(admin_adopt_page_del_yes, admin_adopt_page_del_no)


    bot.send_message(admin_id, f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ?", reply_markup=inline_keyboard)


@bot.callback_query_handler(func= lambda call:call.data.startswith("admin_adopt_page_del_"))
def abs_del_adopt_page(call):

    user_id = call.message.chat.id
    if confirming_admin(user_id):
        bot.answer_callback_query(call.id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    state = get_user_state(user_id)
    current_index = state.get('current_adopt_index', 0)
    adopt_page = get_existing_list_adopts()[current_index]

    print(adopt_page["id"])
    if call.data == "admin_adopt_page_del_yes":
        try:
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            check_sql = "SELECT id FROM art_lots_links WHERE id = %s;"
            cursor.execute(check_sql, (adopt_page['id'],))
            if not cursor.fetchone():
                bot.send_message(user_id, "‚ùå –ê–¥–æ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            sql = "DELETE FROM art_lots_links WHERE id = %s;"
            cursor.execute(sql, (adopt_page['id'],))
            conn.commit()
            bot.send_message(user_id, f'–ê–¥–æ–ø—Ç {adopt_page["id"]} –±—ã–ª —É–¥–∞–ª–µ–Ω.')
            show_adopt_page(call.message, user_id)

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–æ–ø—Ç–∞:", e)
            bot.send_message(user_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–æ–ø—Ç–∞: {e}")
        finally:
            if conn.is_connected():
                cursor.close()
                conn.close()
    else:
        show_adopt_page(call.message, user_id)

# —Ä–µ–¥–∞–∫—Ç–∏—Ä–≤–æ–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞ –∞–¥–æ–ø—Ç–∞
@bot.callback_query_handler(func = lambda call:call.data.startswith("adopt_page_edit_"))
def edit_adopt_page(call):
    user_id = call.message.chat.id
    if confirming_admin(user_id):
        return

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–¥–æ–ø—Ç–∞!")
    bot.register_next_step_handler(call.message, edit_data_adopt_page)

def edit_data_adopt_page(message):
    user_id = message.chat.id
    try:
        price = float(message.text)
        admin_new_price[user_id] = price

        inline_keyboard = types.InlineKeyboardMarkup(row_width=2)
        admin_adopt_page_edit_yes = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                                                callback_data='admin_adopt_page_edit_yes')
        admin_adopt_page_edit_no = types.InlineKeyboardButton("–ù–µ—Ç",
                                                                callback_data='admin_adopt_page_edit_no')
        inline_keyboard.add(admin_adopt_page_edit_yes, admin_adopt_page_edit_no)

        bot.send_message(user_id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?", reply_markup=inline_keyboard)

    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_adopt_page_edit_"))
def abs_edit_adopt_page(call):
    user_id = call.message.chat.id
    if confirming_admin(user_id):
        bot.answer_callback_query(call.id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return

    state = get_user_state(user_id)
    current_index = state.get('current_adopt_index', 0)
    adopt_page = get_existing_list_adopts()[current_index]
    price = admin_new_price[user_id]
    print(adopt_page)
    if call.data == "admin_adopt_page_edit_yes":
        try:
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            sql = "UPDATE art_lots_links SET price = %s WHERE id = %s"
            cursor.execute(sql, (price, adopt_page['id']))
            conn.commit()

            bot.send_message(user_id, f'–£ –∞–¥–æ–ø—Ç–∞ {adopt_page["id"]} –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞—á. –Ω–∞ {price}')
            show_adopt_page(call.message, user_id)

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥–æ–ø—Ç–∞:", e)
            bot.send_message(user_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥–æ–ø—Ç–∞: {e}")
        finally:
            if conn.is_connected():
                cursor.close()
                conn.close()
    else:
        show_adopt_page(call.message, user_id)



@bot.callback_query_handler(func = lambda call:call.data.startswith("adopt_view_btn_bet_"))
def betting_adopt(call):
    user_id = call.message.chat.id
    row_id = int((call.data.split("_"))[-1])
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM art_lots_links WHERE id = %s;", (row_id,))
    result = cursor.fetchone()
    cursor.close()
    conn.close()
    if len(result) == 0:
        bot.send_message(user_id,"üì≠ –°–ø–∏—Å–æ–∫ –∞–¥–æ–ø—Ç–æ–≤ –ø—É—Å—Ç")
        return
    if result == None:
        bot.send_message(user_id, "–î–∞–Ω–Ω–æ–≥–æ –∞–¥–æ–ø—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–∫—Ä—ã—Ç!")
        return

    bot.send_message(user_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –º–µ–Ω—å—à–µ, —á–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞")
    bot.register_next_step_handler(call.message, get_betting_price)

def get_betting_price(message):
    user_id = message.chat.id
    state = get_user_state(user_id)
    if message.text in ["–û—Ç–º–µ–Ω–∞","–ê–¥–æ–ø—Ç—ã","–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"]:
        bot.send_message(user_id, "–í–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")
        return
    current_index = state.get('current_adopt_index', 0)
    adopt_page = get_existing_list_adopts()[current_index]
    adopt_id = adopt_page["id"]
    price = adopt_page["price"]
    current_price= adopt_page["current_bid"]

    try :
        current_bid = float(message.text)
        minimal_bid  = adopt_page["minimal_bid"]
        last_bidder_id = user_id
        last_bidder_username = get_username_by_id(user_id)

        # print(adopt_page)
        # print(current_bid, current_price, minimal_bid)
        if  current_bid == price and current_price == 0.00 or current_bid >= minimal_bid + current_price :

            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            sql = "UPDATE art_lots_links SET current_bid = %s, last_bidder_id = %s, last_bidder_username = %s WHERE id = %s"
            cursor.execute(sql, (current_bid, last_bidder_id, last_bidder_username , adopt_id))
            conn.commit()
            cursor.close()
            conn.close()

            bot.send_message(user_id, "–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!")
            if user_id != admin_id:
                bot.send_message(user_id, "–û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ –∞–≤—Ç–æ—Ä–∞ —Å –≤–∞–º–∏!")
            show_adopt_page(message, user_id)
        else:
            bot.send_message(user_id,"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ª–∏–±–æ –º–µ–Ω—å—à–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π, –ª–∏–±–æ –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É!")
            show_adopt_page(message, user_id)
    except ValueError:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã!")
        bot.register_next_step_handler(message,get_betting_price)

@bot.callback_query_handler(func=lambda call: call.data in ["adopt_view_back", "adopt_view_forward"])
def change_adopt_page(call):
    user_id = call.message.chat.id
    state = get_user_state(user_id)
    current_index = state.get('current_adopt_index', 0)

    if call.data == "adopt_view_back":
        current_index -= 1
    elif call.data == "adopt_view_forward":
        current_index += 1

    state['current_adopt_index'] = current_index
    show_adopt_page(call.message, user_id, edit=True)

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞–¥–æ–ø—Ç–∞
@bot.message_handler(func = lambda message:message.text == "–í—ã–ª–æ–∂–∏—Ç—å –∞–¥–æ–ø—Ç–∞")
def publicate_adopt(message):
    global admin_data_publicate
    admin_data_publicate = {}
    if confirming_admin(message.chat.id):
        bot.answer_callback_query(message.chat.id, text="üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    chat_id = message.chat.id
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞. –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–æ–ø—Ç–∞! (–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞')")
    bot.register_next_step_handler(message, get_adopt_image)
# 1 - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ id –∏–∑–æ–±–æ–±—Ä–∞–∂–µ–Ω–∏—è
def get_adopt_image(message):
    chat_id = message.chat.id
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(chat_id, "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞!")
        return

    if message.photo:
        file_id = message.photo[-1].file_id
        admin_data_publicate['file_id'] = file_id

        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥–æ–ø—Ç–∞/–∞–¥–æ–ø—Ç–æ–≤!")
        bot.register_next_step_handler(message,get_adopt_title)


        # bot.send_photo(chat_id,file_id, caption="–≤–∞—à–µ —Ñ–æ—Ç–æ")
        # file_info = bot.get_file(file_id)
        # file_url = f"https://api.telegram.org/file/bot{token}/{file_info.file_path}"
        # file_name = f"piknave_{file_id}.jpg"
        # file_path = os.path.join(IMAGE_DIR, file_name)
        #
        # response = requests.get(file_url)
        # with open(file_path, "wb") as file:
        #     file.write(response.content)
        # admin_data_publicate['image_path'] = file_path
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ —Ñ–∞–π–ª!")
        bot.register_next_step_handler(message,get_adopt_image)
# 2 - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
def get_adopt_title(message):
    chat_id = message.chat.id
    admin_data_publicate["title"] = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã! –¶–µ–Ω—É —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∫–æ–Ω—Ü–µ –æ–ø–∏—Å–∞–Ω–∏—è")
    bot.register_next_step_handler(message,get_adopt_description)
# 3 - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
def get_adopt_description(message):
    chat_id = message.chat.id
    admin_data_publicate["description"] = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É (default = 100 —Ä—É–±.\n"
                              "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n")
    bot.register_next_step_handler(message,get_adopt_price)
# 4 - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
def get_adopt_price(message):
    chat_id = message.chat.id
    try:
        text_message = (message.text).split()
        price = float(text_message[0])
        min_bid = 100
        if text_message == 2:
            min_bid = float(text_message[1])
        admin_data_publicate["price"] = price
        admin_data_publicate["minimal_bid"] = min_bid

        inline_keyboard = types.InlineKeyboardMarkup(row_width=2)
        button_order_requests = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",callback_data='admin_confirming_adopt_yes')
        button_order_confirmed = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data='admin_confirming_adopt_no')
        inline_keyboard.add(button_order_confirmed,button_order_requests)

        text_full_adopt_lot = (f"–ù–∞–∑–≤–∞–Ω–∏–µ - {admin_data_publicate['title']}\n"
                               f"–û–ø–∏—Å–∞–Ω–∏–µ:\n"
                               f"{admin_data_publicate['description']}\n"
                               f"–¶–µ–Ω–∞: {admin_data_publicate['price']} —Ä—É–±. / {admin_data_publicate['price']/100} $\n"
                               f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ {min_bid} —Ä—É–±./ {min_bid / 100} $\n\n"
                               f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?")
        msg = bot.send_photo(chat_id, admin_data_publicate['file_id'], caption=text_full_adopt_lot,reply_markup=inline_keyboard)
        delete_message_bot[chat_id] = msg.message_id
    except ValueError:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã!")
        bot.register_next_step_handler(message,get_adopt_price)
@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_confirming_adopt_"))
def pre_final_adopt_publishing(call):
    global admin_data_publicate
    chat_id = call.message.chat.id
    if chat_id != admin_id:
        bot.answer_callback_query(chat_id, text="üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    if call.data == "admin_confirming_adopt_yes":
        image_id = admin_data_publicate['file_id']
        title = admin_data_publicate['title']
        description = admin_data_publicate['description']
        price = admin_data_publicate['price']
        min_bid = admin_data_publicate['minimal_bid']
        try:
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor(dictionary=True)
            cursor.execute(
                "SELECT * FROM art_lots_links WHERE image_url = %s", (image_id,))
            existing_adopt_image = cursor.fetchall()
            if existing_adopt_image:
                if chat_id in delete_message_bot:
                    bot.delete_message(chat_id, delete_message_bot[chat_id])
                    del delete_message_bot[chat_id]
                else:
                    bot.send_message(chat_id, "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")

                bot.send_message(chat_id, "–≠—Ç–æ—Ç –∞–¥–æ–ø—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ!")
                admin_data_publicate = {}
                return
            else:
                save_lot_to_db(chat_id, title, description, image_id, price, min_bid)
                bot.send_message(chat_id, "–ù–æ–≤—ã–π –∞–¥–æ–ø—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            cursor.close()
            conn.close()
        except Exception as e:
            print("–û—à–∏–±–∫–∞!", e)
    else:
        if chat_id in delete_message_bot:
            bot.delete_message(chat_id, delete_message_bot[chat_id])
            del delete_message_bot[chat_id]
        else:
            bot.send_message(chat_id, "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")

        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞. –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–æ–ø—Ç–∞!")
        bot.register_next_step_handler(call.message, get_adopt_image)


@bot.message_handler(func = lambda message:message.text == "–ó–∞–∫–∞–∑—ã")
def orders_for_admin(message):
    if confirming_admin(message.chat.id):
        bot.answer_callback_query(message.chat.id, text="üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    inline_keyboard = types.InlineKeyboardMarkup(row_width=2)

    button_order_requests = types.InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å—ã",callback_data='admin_order_requests')
    button_order_confirmed = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ", callback_data='admin_order_confirmed')

    inline_keyboard.add(button_order_confirmed,button_order_requests)

    request_order = len(get_order_lists("–æ–∂–∏–¥–∞–µ—Ç"))
    confirmed_order = len(get_order_lists("–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"))

    bot.send_message(admin_id,f"–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - {request_order}"
                                                f"\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - {confirmed_order}",reply_markup=inline_keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["admin_order_requests", "admin_order_confirmed"])
def handle_order_lists(call):
    user_id = call.message.chat.id
    if confirming_admin(user_id):
        bot.answer_callback_query(user_id, text="üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    state = get_admin_state(user_id)
    list_type = '–æ–∂–∏–¥–∞–µ—Ç' if call.data == 'admin_order_requests' else '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
    state['current_list'] = list_type
    state['pages'][list_type] = 0

    show_order_page(call.message, user_id, list_type)


@bot.callback_query_handler(func=lambda call: call.data in ["requestOrder_back", "requestOrder_forward"])
def change_order_page(call):
    user_id = call.message.chat.id
    if confirming_admin(user_id):
        bot.answer_callback_query(user_id, text="üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    state = get_admin_state(user_id)
    current_list = state['current_list']
    current_page = state['pages'][current_list]
    orders = get_order_lists(current_list)
    total_pages = max(1, (len(orders) + page_size - 1) // page_size)

    if call.data == "requestOrder_back":
        if current_page > 0:
            state['pages'][current_list] -= 1
    elif call.data == "requestOrder_forward":
        if current_page < total_pages - 1:
            state['pages'][current_list] += 1

    try:
        show_order_page(call.message, user_id, current_list)
    except Exception as e:
        bot.answer_callback_query(call.id, text=f"–û—à–∏–±–∫–∞: {e}")

def get_admin_state(user_id):
    if user_id not in admin_state:
        admin_state[user_id] = {
            'current_list': '–æ–∂–∏–¥–∞–µ—Ç',
            'pages': {'–æ–∂–∏–¥–∞–µ—Ç': 0, '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è': 0}
        }
    return admin_state[user_id]


def show_order_page(message, user_id, list_type):
    state = get_admin_state(user_id)
    current_page = state['pages'][list_type]
    orders = get_order_lists(list_type)
    total_orders = len(orders)
    total_pages = max(1, (total_orders + page_size - 1) // page_size)

    start_idx = current_page * page_size
    end_idx = start_idx + page_size
    orders_to_show = orders[start_idx:end_idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if not orders_to_show:
        text = "üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç."
        markup = types.InlineKeyboardMarkup()
    else:
        order = orders_to_show[0]
        status_emoji = "‚è≥" if list_type == '–æ–∂–∏–¥–∞–µ—Ç' else '‚úÖ'
        text = (
            f"üìå –ó–∞–∫–∞–∑ ‚Ññ{order['id']}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{order['username']} (ID: {order['user_id']})\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order['order_details']}\n"
            f"{status_emoji} –°—Ç–∞—Ç—É—Å: {list_type}\n"
            f"üìÖ –î–∞—Ç–∞: {order['created_at']}"
        )
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='requestOrder_back')
        btn_next = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚Üí", callback_data='requestOrder_forward')
        if list_type == '–æ–∂–∏–¥–∞–µ—Ç':
            btn_confirm = types.InlineKeyboardButton(   "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",    callback_data='requestOrder_confirm')
            btn_reject = types.InlineKeyboardButton(    "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",      callback_data='requestOrder_rejection')
        else:
            btn_confirm = types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='confirmedOrder_confirm')
            btn_reject = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data='confirmedOrder_rejection')

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if  total_pages ==2 and current_page != 2 or current_page!=0 and current_page == total_pages-1:
            print(total_pages, current_page)
            markup.add(btn_back)
        if current_page < total_pages - 1:
            if current_page > 0:
                markup.row(btn_back, btn_next)
            else:
                markup.add(btn_next)

        markup.row(btn_confirm, btn_reject)

    try:
        if hasattr(message, 'message_id'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            bot.edit_message_text(
                text,
                chat_id=user_id,
                message_id=message.message_id,
                reply_markup=markup
            )
        else:
            bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=markup
            )
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

def get_order_lists(status):
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor(dictionary=True)
    cursor.execute(
        "SELECT id, user_id, username, order_details, status, created_at FROM orders ORDER BY created_at ASC")
    orders = cursor.fetchall()
    cursor.close()
    conn.close()

    if not orders:
        print("—Å–ø–∏—Å–æ–∫  –ø—É—Å—Ç—å")
        return []

    if status == "–æ–∂–∏–¥–∞–µ—Ç":
        return [o for o in orders if o["status"] == "–æ–∂–∏–¥–∞–µ—Ç"]
    elif status == "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è":
        return [o for o in orders if o["status"] == "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"]

# –æ—Ç–∫–∞–∑/–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith('confirmedOrder'))
def update_order_status(call):
    user_id = call.message.chat.id
    if confirming_admin(user_id):
        bot.answer_callback_query(user_id, text="üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    list_request_confirm = get_order_lists("–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
    if len(list_request_confirm) >0:
        user_data_confirming = list_request_confirm[admin_state[user_id]['pages']['–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è']]
        order_id = user_data_confirming["id"]
    print(user_data_confirming)

    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM orders WHERE id = %s", (order_id,))
        result = cursor.fetchone()

        if "confirm" in call.data:
            print("–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            if result:
                user_id = result[0]
                bot.send_message(user_id, f"üîÑ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ó–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ö—É–¥–æ–∂–Ω–∏–∫—É (@piknave) –∑–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")

            bot.send_message(call.message.chat.id, f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –æ–±–Ω–æ–≤–ª—ë–Ω: –∑–∞–≤–µ—Ä—à–µ–Ω")

        elif "rejection" in call.data:
            print("–û—Ç–∫–∞–∑ –∑–∞–∫–∞–∑–∞")

            if result:
                user_id = result[0]
                bot.send_message(user_id, f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.")

            bot.send_message(call.message.chat.id, f"üö´ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω.")
            return
        cursor.execute("DELETE FROM orders WHERE id = %s", (order_id,))
        conn.commit()
        cursor.close()
        conn.close()

    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")


# –æ—Ç–∫–∞–∑/–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–∫–∞–∑
@bot.callback_query_handler(func=lambda call: call.data.startswith('requestOrder'))
def update_order_status(call):
    user_id = call.message.chat.id
    if confirming_admin(user_id):
        bot.answer_callback_query(user_id, text="üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    list_request_confirm = get_order_lists("–æ–∂–∏–¥–∞–µ—Ç")
    if len(list_request_confirm):
        user_data_confirming = list_request_confirm[admin_state[user_id]['pages']['–æ–∂–∏–¥–∞–µ—Ç']]
        order_id = user_data_confirming["id"]
    print(user_data_confirming)

    try:
        if "confirm" in call.data:
            print("–ü—Ä–∏–Ω—è—Ç –∑–∞–∫–∞–∑")
            new_status = "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"

            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            cursor.execute("UPDATE orders SET status = %s WHERE id = %s", (new_status, order_id))
            conn.commit()
            cursor.execute("SELECT user_id FROM orders WHERE id = %s", (order_id,))
            result = cursor.fetchone()

            if result:
                user_id = result[0]
                bot.send_message(user_id, f"üîÑ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!")

            bot.send_message(call.message.chat.id, f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –æ–±–Ω–æ–≤–ª—ë–Ω: {new_status}")

            cursor.close()
            conn.close()

        elif "rejection" in call.data:
            # –ü–æ–ª—É—á–∞–µ–º user_id –∑–∞–∫–∞–∑—á–∏–∫–∞
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM orders WHERE id = %s", (order_id))
            result = cursor.fetchone()
            cursor.close()
            conn.close()

            if result:
                user_id = result[0]
                bot.send_message(user_id, f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.")

            bot.send_message(call.message.chat.id, f"üö´ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω.")
            return
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")

# Create-order
@bot.message_handler(func = lambda message:message.text == "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
def place_an_order(message):
    user_id = message.chat.id
    if confirming_admin(user_id) == False:
        return



    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    active_orders = get_order_lists("–æ–∂–∏–¥–∞–µ—Ç") + get_order_lists("–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
    if any(order["user_id"] == user_id and order["status"] == "–æ–∂–∏–¥–∞–µ—Ç" for order in active_orders):
        order = [order for order in active_orders if order["user_id"] == user_id][0]


        inline_kb = types.InlineKeyboardMarkup(row_width=2)
        button_yes  = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?", callback_data='order_cancellation_yes')
        button_no   = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='order_cancellation_no')
        inline_kb.add(button_yes, button_no)

        msg = bot.send_message(user_id,
                         f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤ –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞.\n"
                         f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞.\n"
                         f"–ó–∞–∫–∞–∑ |id = {order['id']}| –æ—Ç {order['username']}\n"
                         f"–û–ø–∏—Å–∞–Ω–∏–µ: |{order['order_details']}|\n"
                         f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: |{order['created_at']}|\n"
                         f"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?",
                         parse_mode="HTML",
                         reply_markup= inline_kb)
        delete_message_bot[user_id] = msg.message_id
        return

    inline_keyboard = types.InlineKeyboardMarkup(row_width=3)

    button_commission = types.InlineKeyboardButton("Commission",callback_data='commission')
    button_fullArt = types.InlineKeyboardButton("Art with background",callback_data='fullArt')
    button_custom = types.InlineKeyboardButton("Custom order", callback_data='custom_order')

    inline_keyboard.add(button_commission, button_fullArt, button_custom)
    msg = bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∏—Å—É–Ω–∫–∞:", reply_markup=inline_keyboard)
    delete_message_bot[user_id] = msg.message_id

# Commission
@bot.callback_query_handler(func=lambda call: call.data == "commission")
def commisssion_detail(call):
    user_id = call.message.chat.id
    if confirming_admin(call.message.chat.id) == False:
        return
    # –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id in delete_message_bot:
        bot.delete_message(user_id, delete_message_bot[user_id])
        del delete_message_bot[user_id]

    inline_keyboard = types.InlineKeyboardMarkup(row_width=4)
    button_comm_FullBody = types.InlineKeyboardButton("–í –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç", callback_data='commission_FullBody')
    button_comm_HalfBody = types.InlineKeyboardButton("–î–æ –ø–æ—è—Å–∞", callback_data='commission_HalfBody')
    button_comm_toShoulders = types.InlineKeyboardButton("–î–æ –ø–ª–µ—á", callback_data='commission_toShoulders')
    button_comm_chibi = types.InlineKeyboardButton("–ß–∏–±–∏", callback_data='commission_chibi')

    inline_keyboard.add(button_comm_FullBody, button_comm_HalfBody, button_comm_toShoulders,button_comm_chibi)
    msg = bot.send_message(call.message.chat.id,
                                         "–í—ã –≤—ã–±—Ä–∞–ª–∏ Commission. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=inline_keyboard)
    delete_message_bot[user_id] = msg.message_id



@bot.callback_query_handler(func=lambda call: call.data.startswith("commission_"))
def commission_order(call):
    user_id = call.message.chat.id
    if confirming_admin(user_id) == False:
        return
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id in delete_message_bot:
        bot.delete_message(user_id, delete_message_bot[user_id])
        del delete_message_bot[user_id]

    type_commission = None
    if call.data == "commission_FullBody":
        type_commission = "–ü–æ–ª–Ω—ã–π —Ä–æ—Å—Ç"
    elif call.data == "commission_HalfBody":
        type_commission = "–î–æ –ø–æ—è—Å–∞"
    elif call.data == "commission_toShoulders":
        type_commission = "–î–æ –ø–ª–µ—á"
    elif call.data == "commission_chibi":
        type_commission = "–ß–∏–±–∏"
    user_orders[user_id] = f"{type_commission}\n"
    order_description = bot.send_message(call.message.chat.id,
                                         f"–í—ã –≤—ã–±—Ä–∞–ª–∏ Commission ***{type_commission}***. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞:")
    bot.register_next_step_handler(order_description, get_custom_order_datails)


# –†–∏—Å—É–Ω–æ–∫ —Å —Ñ–æ–Ω–æ–º
@bot.callback_query_handler(func=lambda call: call.data == "fullArt")
def fullArt_detail(call):
    user_id = call.message.chat.id
    if confirming_admin(user_id) == False:
        return
    # –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id in delete_message_bot:
        bot.delete_message(user_id, delete_message_bot[user_id])
        del delete_message_bot[user_id]

    inline_keyboard = types.InlineKeyboardMarkup(row_width=4)
    button_comm_FullBody = types.InlineKeyboardButton("–í –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç", callback_data='fullArt_FullBody')
    button_comm_HalfBody = types.InlineKeyboardButton("–î–æ –ø–æ—è—Å–∞", callback_data='fullArt_HalfBody')
    button_comm_toShoulders = types.InlineKeyboardButton("–î–æ –ø–ª–µ—á", callback_data='fullArt_toShoulders')
    button_comm_chibi = types.InlineKeyboardButton("–ß–∏–±–∏", callback_data='fullArt_chibi')

    inline_keyboard.add(button_comm_FullBody, button_comm_HalfBody, button_comm_toShoulders, button_comm_chibi)
    msg = bot.send_message(call.message.chat.id,
                           "–í—ã –≤—ã–±—Ä–∞–ª–∏ –†–∏—Å—É–Ω–æ–∫ –≤–º–µ—Å—Ç–µ —Å —Ñ–æ–Ω–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=inline_keyboard)
    delete_message_bot[user_id] = msg.message_id


@bot.callback_query_handler(func=lambda call: call.data.startswith("fullArt_"))
def fullArt_order(call):
    user_id = call.message.chat.id
    if confirming_admin(user_id) == False:
        return
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id in delete_message_bot:
        bot.delete_message(user_id, delete_message_bot[user_id])
        del delete_message_bot[user_id]

    type_commission = None
    if call.data == "fullArt_FullBody":
        type_commission = "–ü–æ–ª–Ω—ã–π —Ä–æ—Å—Ç"
    elif call.data == "fullArt_HalfBody":
        type_commission = "–î–æ –ø–æ—è—Å–∞"
    elif call.data == "fullArt_toShoulders":
        type_commission = "–î–æ –ø–ª–µ—á"
    elif call.data == "fullArt_chibi":
        type_commission = "–ß–∏–±–∏"
    user_orders[user_id] = f"{type_commission}"
    order_description = bot.send_message(call.message.chat.id,
                                         f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –†–∏—Å—É–Ω–æ–∫ –≤–º–µ—Å—Ç–µ —Å —Ñ–æ–Ω–æ–º ***{type_commission}***. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞:")
    bot.register_next_step_handler(order_description, get_custom_order_datails)


@bot.callback_query_handler(func=lambda call: call.data == "custom_order")
def custom_order_detail(call):
    user_id = call.message.chat.id
    if confirming_admin(user_id) == False:
        return
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id in delete_message_bot:
        bot.delete_message(user_id, delete_message_bot[user_id])
        del delete_message_bot[user_id]

    order_description = bot.send_message(call.message.chat.id,
                                         "–í—ã –≤—ã–±—Ä–∞–ª–∏ Custom order. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞:")
    bot.register_next_step_handler(order_description, get_custom_order_datails)

def get_custom_order_datails(message):
    user_id = message.chat.id
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id in delete_message_bot:
        bot.delete_message(user_id, delete_message_bot[user_id])
        del delete_message_bot[user_id]
    order_details = message.text
    back_user_orders = user_orders[user_id]
    user_orders[user_id] = f"{back_user_orders}\n {order_details}"
    buttons_yes_no = types.InlineKeyboardMarkup(row_width=2)
    buttons_yes_no.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='order_confirmation_yes'),
        types.InlineKeyboardButton("‚ùå –ò–∑–º–µ–Ω–∏—Ç—å", callback_data='order_confirmation_no')
    )

    msg = bot.send_message(user_id, f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\"{order_details}\".\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?", reply_markup=buttons_yes_no)
    delete_message_bot[user_id] = msg.message_id

@bot.callback_query_handler(func=lambda call: call.data.startswith("order_cancellation_"))
def user_order_cancellation(call):
    user_id = call.message.chat.id
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_id in delete_message_bot:
        bot.delete_message(user_id, delete_message_bot[user_id])
        del delete_message_bot[user_id]

    if call.data == "order_cancellation_yes":
        try:

            active_orders = get_order_lists("–æ–∂–∏–¥–∞–µ—Ç")
            order = [order for order in active_orders if order["user_id"] == user_id][0]

            print(order['id'])
            if order:
                order_id = order["id"]
                conn = mysql.connector.connect(**db_config)
                cursor = conn.cursor()
                sql = "DELETE FROM orders WHERE id = %s"
                cursor.execute(sql, (order_id,))
                conn.commit()
                cursor.close()
                conn.close()
                bot.send_message(user_id, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!")
            else:
                bot.send_message(user_id, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: {e}")
            bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞!")


@bot.callback_query_handler(func=lambda call: call.data.startswith('order_confirmation_'))
def order_confirmtion_handler(call):
    user_id = call.message.chat.id
    if confirming_admin(user_id) == False:
        return
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_id in delete_message_bot:
        bot.delete_message(user_id, delete_message_bot[user_id])
        del delete_message_bot[user_id]

    if call.data == "order_confirmation_yes":
        username = call.from_user.username or "–ë–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞"
        order_details = user_orders[user_id]

        if order_details:
            save_order_to_db(user_id, username, order_details)
            bot.send_message(user_id, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")

        else:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞: –ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    elif call.data == "order_confirmation_no":
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
        bot.register_next_step_handler(call.message, get_custom_order_datails)




def save_order_to_db(user_id, username, order_details):
    global admin_data_publicate
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        created_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        sql = "INSERT INTO orders (user_id, username, order_details, created_at) VALUES (%s, %s, %s, %s)"
        cursor.execute(sql, (user_id, username, order_details, created_time))
        conn.commit()
        order_id = cursor.lastrowid
        cursor.close()
        conn.close()
        admin_data_publicate = {}
        return  order_id, created_time
    except Exception as error:
        print("–æ—à–∏–±–∫–∞ –≤ –∑–∞–ø–∏—Å–∏ –±–¥ –∑–∞–∫–∞–∑–∞",error)
        return None

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –î–ë –¥–∞–Ω–Ω—ã–µ –∞–¥–æ–ø—Ç–∞
def save_lot_to_db(user_id, title, description, image_url, price, minimal_bid):
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        sql = "INSERT INTO art_lots_links (title, description, image_url, price, minimal_bid) VALUES (%s, %s, %s, %s, %s)"
        cursor.execute(sql, (title, description, image_url, price, minimal_bid))
        conn.commit()
        order_id = cursor.lastrowid
        cursor.close()
        conn.close()
        return  order_id
    except mysql.connector.Error as error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {error}")
        return None

# –û–±–Ω–æ–≤–ª–µ–Ω–µ–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–æ–ø—Ç–∞ (—Å–ø—Ä–≤–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞: –∞–∫—Ç–∏–≤–µ–Ω/–ø—Ä–æ–¥–∞–Ω/—Å–∫—Ä—ã—Ç)
def update_lot_status(adopt_id, new_status):
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        sql = "UPDATE art_lots_links SET status = %s WHERE id = %s"
        cursor.execute(sql, (new_status, adopt_id))
        conn.commit()
        cursor.close()
        conn.close()
        return True
    except Exception as error:
        print(f"–û—à–∏–±–∫–∞! –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ - {error}")
        return False

def get_username_by_id(user_id):
    try:
        chat = bot.get_chat(user_id)
        username = chat.username
        return username
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ : {e}")
        return "–ê–Ω–æ–Ω–∏–º"

# @app.route("/set_webhook", methods=["GET"])
# def set_webhook():
#     webhook_url = f"https://hiriimosa.pythonanywhere.com/{token}"  # URL PythonAnywhere
#     bot.remove_webhook()
#     bot.set_webhook(url=webhook_url)
#     return "Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", 200


if __name__ == '__main__':
    print("Starting bot...")
    app.run(host="0.0.0.0", port=5000)



